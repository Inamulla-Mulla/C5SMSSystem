<UserControl xmlns:dxn="http://schemas.devexpress.com/winfx/2008/xaml/navbar"  x:Name="ucGroupSMS" x:Class="C5SMSSystem.GroupSMS"
             xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
             xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"  
             xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             xmlns:ac="clr-namespace:AdornedControl;assembly=AdornedControl"
             xmlns:crtl="clr-namespace:C5SMSSystem"
             xmlns:crtls="clr-namespace:C5SMSSystem.Controls"
             mc:Ignorable="d" 
             xmlns:assets="clr-namespace:C5SMSSystem"
             d:DesignHeight="600" d:DesignWidth="600" DataContext="{Binding}">
    <UserControl.Resources>
        <assets:MultiParametersConverter x:Key="MultiParamConv"/>
        <assets:EnumBooleanConverter x:Key="EnumBoolConv"/>
    </UserControl.Resources>
    
    <Grid SnapsToDevicePixels="True">
        <ac:AdornedControl x:Name="LoadingAdorner" IsAdornerVisible="{Binding Path=IsAdornVisible,Mode=TwoWay}">
            <ac:AdornedControl.AdornerContent>
                <crtl:LoadingWait></crtl:LoadingWait>
            </ac:AdornedControl.AdornerContent>
            <dx:DXTabControl x:Name="groupSMSTabControl" SelectedIndex="0">
                <dx:DXTabControl.View>
                    <dx:TabControlMultiLineView HeaderLocation="Top"/>
                </dx:DXTabControl.View>
                <dx:DXTabItem Header="Message">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="20*"/>
                            <ColumnDefinition Width="80*"/>
                        </Grid.ColumnDefinitions>
                        <Grid SnapsToDevicePixels="True">
                            <Grid SnapsToDevicePixels="True">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <dx:GroupFrame Header="Options" Margin="0,12,20,5">
                                    <StackPanel SnapsToDevicePixels="True" Orientation="Horizontal">
                                        <RadioButton  GroupName="Users" x:Name="rdoUsers" Content="User wise " IsChecked="{Binding Path=IsSelected, Mode=TwoWay, Converter={StaticResource EnumBoolConv}, ConverterParameter=Users}"/>
                                        <RadioButton  GroupName="Ranks" x:Name="rdoRanks" Content="Rank wise " IsChecked="{Binding Path=IsSelected,Mode=TwoWay, Converter={StaticResource EnumBoolConv},ConverterParameter=Ranks}"/>
                                    </StackPanel>
                                </dx:GroupFrame>
                                <Grid SnapsToDevicePixels="True" Grid.Row="1">
                                    <dxn:NavBarControl Name="navMaintenanceBar" Margin="0,5,20,20">
                                        <dxn:NavBarControl.Groups>
                                            <dxn:NavBarGroup Header="{Binding IsSelected,Mode=OneWay}" DisplaySource="Content" GroupScrollMode="None">
                                                <dxn:NavBarGroup.Content>
                                                    <StackPanel SnapsToDevicePixels="True">
                                                        <dxe:ListBoxEdit x:Name="dynamicList" ItemsSource="{Binding DynamicList}" 
                                                        EditValue="{Binding Path=SelectedList,Mode=TwoWay}">

                                                            <dxe:ListBoxEdit.StyleSettings>
                                                                <dxe:CheckedListBoxEditStyleSettings/>
                                                            </dxe:ListBoxEdit.StyleSettings>
                                                        </dxe:ListBoxEdit>
                                                    </StackPanel>
                                                </dxn:NavBarGroup.Content>
                                            </dxn:NavBarGroup>
                                        </dxn:NavBarControl.Groups>
                                    </dxn:NavBarControl>
                                </Grid>
                            </Grid>
                        </Grid>
                        <dx:GroupFrame Header="Message" Grid.Column="1" Margin="0,12,20,20">
                            <Grid SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Button Content="Send" Height="23" HorizontalAlignment="Right" Name="btnSendMaintenance" VerticalAlignment="Top" Margin="0,200,0,0" Width="75" Command="{Binding Path=SendMaintenanceCommand}">
                                    <Button.Style>
                                        <Style TargetType="{x:Type Button}">
                                            <Setter Property="IsEnabled" Value="false" />
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding ElementName=txtMaintenanceMessage, Path=(Validation.HasError)}" Value="false" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="IsEnabled" Value="true" />
                                                </MultiDataTrigger>
                                                <DataTrigger Binding ="{Binding ElementName=dynamicList, Path=SelectedIndex}" Value="-1">
                                                    <Setter Property="IsEnabled" Value="false"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>

                                <TextBlock x:Name="waitMessage" Visibility="{Binding WaitSMSVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0,200,100,0" Text="Sending SMS ... Please wait." Height="25" VerticalAlignment="Top"/>
                                
                                <TextBox Height="23" Margin="0,30,0,0" Name="txtMaintenanceMessage" AcceptsReturn="True" VerticalAlignment="Top" HorizontalAlignment="Stretch" MaxLength="150" MinHeight="150" VerticalScrollBarVisibility="Auto" Validation.ErrorTemplate="{StaticResource errorTemplateSilverlightStyle}">
                                    <TextBox.Text>
                                        <Binding Path="SendMaintenanceMessage" UpdateSourceTrigger="PropertyChanged" ValidatesOnExceptions="True" ValidatesOnDataErrors="True" Mode="TwoWay" >
                                            <Binding.ValidationRules>
                                                <assets:Required x:Name="MessageRequired" ValidatesOnTargetUpdated="True"
                                              Message="Message cannot be empty"/>
                                                <ExceptionValidationRule/>
                                            </Binding.ValidationRules>
                                        </Binding>
                                    </TextBox.Text>
                                </TextBox>
                                <Grid Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,30,0,0" >
                                    <Border x:Name="PART_addIconBorder" BorderThickness="1" CornerRadius="2" Height="16" Width="16">
                                        <Image x:Name="addIcon"
                                            Stretch="Fill" 
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            ToolTip="Add template" 
                                            Source="pack://application:,,,/C5SMSSystem;component/Resources/Add.png">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="MouseLeftButtonDown">
                                                    <ei:CallMethodAction MethodName="addconMouseLeftButtonDown" TargetObject="{Binding Path=DataContext, ElementName=ucGroupSMS}"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </Image>
                                        <Border.Style>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="BorderBrush" Value="#FF5E5E5E" />
                                                <Setter Property="IsEnabled" Value="False" />
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding ="{Binding ElementName=addIcon, Path=IsMouseOver}" Value="true"/>
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="BorderBrush" Value="Black" />
                                                    </MultiDataTrigger>
                                                    <DataTrigger Binding ="{Binding ElementName=ucGroupSMS, Path=DataContext.TemplateCount}" Value="true">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                    </Border>
                                </Grid>
                            </Grid>
                        </dx:GroupFrame>
                    </Grid>
                </dx:DXTabItem>

                <dx:DXTabItem Header="Log">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <dxg:GridControl x:Name="grdMaintenanceLog" ItemsSource="{Binding MaintenanceMessages,UpdateSourceTrigger=PropertyChanged}" AutoPopulateColumns="False"
                                                 MaxHeight="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Path=ActualHeight}">
                            <dxg:GridControl.Columns>
                                <dxg:GridColumn Header="Maintenance Message" FieldName="SentMessage" ReadOnly="True"/>
                                <dxg:GridColumn Header="Sent Status" FieldName="SentStatus" ReadOnly="True"/>
                                <dxg:GridColumn Header="Sent Date Time" FieldName="SentDateTime" ReadOnly="True" EditSettings="{dxe:DateSettings DisplayFormat=G}"  AllowEditing="False"/>
                            </dxg:GridControl.Columns>
                            <dxg:GridControl.View>
                                <dxg:TableView ShowGroupPanel="False" AutoWidth="True" WaitIndicatorType="Panel" AllowCascadeUpdate="True"/>
                            </dxg:GridControl.View>
                        </dxg:GridControl>
                        <Button x:Name="btnMaintenancePrint" Content="Print/Export" Grid.Row="1" Command="{Binding Path=PrintExportCommand, Mode=Default}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,10,0,0" MinWidth="80">
                            <Button.CommandParameter>
                                <MultiBinding Converter="{StaticResource MultiParamConv}">
                                    <Binding ElementName="grdMaintenanceLog" Path="View"></Binding>
                                    <Binding ElementName="ucGroupSMS"></Binding>
                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                    </Grid>
                </dx:DXTabItem>

                <dx:DXTabItem Header="Error Log">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <dxg:GridControl x:Name="grdErrorLog" ItemsSource="{Binding Errors,UpdateSourceTrigger=PropertyChanged}" AutoPopulateColumns="True"
                                                 MaxHeight="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, Path=ActualHeight}">
                            <dxg:GridControl.Columns>
                                <dxg:GridColumn Header="Date Time" FieldName="time" ReadOnly="True"/>
                                <dxg:GridColumn Header="Description" FieldName="description" ReadOnly="True"/>
                                <dxg:GridColumn Header="Method" FieldName="method" ReadOnly="True" EditSettings="{dxe:DateSettings TextWrapping=Wrap}"/>
                                <dxg:GridColumn Header="Trace" FieldName="trace" ReadOnly="True" EditSettings="{dxe:DateSettings TextWrapping=Wrap}"/>
                            </dxg:GridControl.Columns>
                            <dxg:GridControl.View>
                                <dxg:TableView ShowGroupPanel="False" AutoWidth="True" WaitIndicatorType="Panel" AllowCascadeUpdate="True"/>
                            </dxg:GridControl.View>
                        </dxg:GridControl>
                        <Button x:Name="btnReLoad" Content="Refresh" Grid.Row="1" Command="{Binding Path=RefreshCommand, Mode=Default}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,10,100,0" MinWidth="80"/>
                        <Button x:Name="btnErrorPrint" Content="Print/Export" Grid.Row="1" Command="{Binding Path=PrintExportCommand, Mode=Default}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,10,0,0" MinWidth="80">
                            <Button.CommandParameter>
                                <MultiBinding Converter="{StaticResource MultiParamConv}">
                                    <Binding ElementName="grdErrorLog" Path="View"></Binding>
                                    <Binding ElementName="ucGroupSMS"></Binding>
                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                    </Grid>
                </dx:DXTabItem>

                <dx:DXTabItem Header="Settings">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="23*"/>
                            <ColumnDefinition Width="77*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="10"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="10"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <dx:GroupFrame Grid.Row="0" Header="{Binding Path=SettingsHeader,Mode=TwoWay}">
                            <Grid SnapsToDevicePixels="True" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="5"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="5"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="5"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="5"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Label x:Name="lblCurrentPassword" Content="Current Password :" HorizontalAlignment="Right" VerticalAlignment="Center" Visibility="{Binding Path=CurrentPasswordVisiblity,Mode=TwoWay}"/>
                                <Label Grid.Row="2" x:Name="lblNewPassword" Content="New Password :" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                                <Label Grid.Row="4" x:Name="lblVerifyPassword" Content="Verify Password :" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                                <PasswordBox Grid.Column="2" x:Name="txtCurrentPassword" crtl:PasswordBoxExtension.BindPassword="True" crtl:PasswordBoxExtension.BoundPassword="{Binding Path=CurrentPassword,Mode=TwoWay}" Visibility="{Binding Path=CurrentPasswordVisiblity,Mode=TwoWay}" MaxLength="8" MinWidth="150" VerticalAlignment="Stretch"/>
                                <PasswordBox Grid.Column="2" Grid.Row="2" x:Name="txtNewPassword" crtl:PasswordBoxExtension.BindPassword="True" crtl:PasswordBoxExtension.BoundPassword="{Binding Path=NewPassword,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" MaxLength="8" MinWidth="150" VerticalAlignment="Stretch"/>
                                <PasswordBox Grid.Column="2" Grid.Row="4" x:Name="txtVerifyPassword" crtl:PasswordBoxExtension.BindPassword="True" crtl:PasswordBoxExtension.BoundPassword="{Binding Path=VerifyPassword,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" MaxLength="8" MinWidth="150" VerticalAlignment="Stretch"/>
                                <Button Grid.Column="2" Grid.Row="6" x:Name="btnSavePassword" Content="Save" Height="25" HorizontalAlignment="Right" VerticalAlignment="Top" Width="75" Command="{Binding Path=SavePasswordCommand}">
                                </Button>
                            </Grid>
                        </dx:GroupFrame>

                        <dx:GroupFrame Grid.Row="2" Header="{Binding Path=TowerIDLengthHeader,Mode=TwoWay}">
                            <Grid HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="80"/>
                                </Grid.ColumnDefinitions>

                                <TextBox Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Center" MinWidth="170" MaxLength="2"
                                         x:Name="txtTowerIDLength" Text="{Binding RequestedTowerIDMinimumLength}"/>
                                <Button Grid.Column="1" HorizontalAlignment="Right" x:Name="btnSave" Content="Save" Width="75" Command="{Binding SaveCommand}" ToolTip="Click to save Requested tower ID minimum length"/>
                            </Grid>
                        </dx:GroupFrame>

                        <dx:GroupFrame Grid.Row="4" Header="Welcome Message">
                            <Grid SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="10">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="10"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="10"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <CheckBox x:Name="chkSetWelcomeMessage" Content="Send welcome message" IsChecked="{Binding SendWelcomeMsg,Mode=TwoWay}"/>
                                    <Image x:Name="HelpIcon"
                                        Stretch="Fill"
                                        Width="20"
                                        Height="20" 
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Center"
                                        ToolTip="Please use following key words to add user data dynamically in message.&#x0a;User Name : {uName}&#x0a;Phone No : {pNo}&#x0a;State Name: {sName}&#x0a;Privileges: {pvlg}&#x0a;Note: 'Key words are case sensitive'.&#x0a;&#x0a; Eg:  Hello {uName}.&#x0a;        Hello John."  
                                        Source="pack://application:,,,/C5SMSSystem;component/Resources/Help.png">
                                    </Image>
                                </Grid>
                                <Grid Grid.Row="2" SnapsToDevicePixels="True">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="5"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <TextBlock  x:Name="lblWelcomeMsg" Text="Message :"/>
                                    <TextBox Grid.Row="2" x:Name="txtWelcomMessage" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" Validation.ErrorTemplate="{StaticResource errorTemplateSilverlightStyle}">
                                        <TextBox.Text>
                                            <Binding Path="WelcomeMessage" UpdateSourceTrigger="PropertyChanged" ValidatesOnExceptions="True" ValidatesOnDataErrors="True" Mode="TwoWay" >
                                                <Binding.ValidationRules>
                                                    <assets:Required x:Name="WelcomeMessageRequired" ValidatesOnTargetUpdated="True"
                                                        Message="Message cannot be empty"/>
                                                    <ExceptionValidationRule/>
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                        <TextBox.Style>
                                            <Style TargetType="TextBox">
                                                <Setter Property="IsEnabled" Value="False"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding ="{Binding ElementName=chkSetWelcomeMessage, Path=IsChecked}" Value="true">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBox.Style>
                                    </TextBox>
                                </Grid>
                                <Button Grid.Row="4" x:Name="btnSaveWelcomeMessage" Content="Save" Height="25" HorizontalAlignment="Right" VerticalAlignment="Top" Width="75" Command="{Binding Path=SaveWelcomeMsgCommand}">
                                    <Button.Style>
                                        <Style TargetType="{x:Type Button}">
                                            <Setter Property="IsEnabled" Value="False" />
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding ElementName=txtWelcomMessage, Path=(Validation.HasError)}" Value="false" />
                                                        <Condition Binding="{Binding ElementName=chkSetWelcomeMessage, Path=IsChecked}" Value="true" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="IsEnabled" Value="True" />
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                            </Grid>
                        </dx:GroupFrame>
                    </Grid>
                </dx:DXTabItem>
                
                <dx:DXTabItem Header="Message Templates">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="20*"/>
                            <ColumnDefinition Width="10"/>
                            <ColumnDefinition Width="80*"/>
                        </Grid.ColumnDefinitions>
                        <Grid SnapsToDevicePixels="True">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <ContentControl Template="{StaticResource HeaderTemplate}" Content="Templates" SnapsToDevicePixels="True" />
                            <Grid SnapsToDevicePixels="True" Grid.Row="1">
                                <dxe:ListBoxEdit x:Name="lstTemplates" Grid.Row="1" Background="Transparent"  BorderBrush="Transparent" AllowItemHighlighting="True" ShowBorder="False" SelectionMode="Single" 
                                    HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                    ItemsSource="{Binding TemplateCollection,Mode=TwoWay}" 
                                    SelectedItem="{Binding SelectedTemplate}"   
                                    DisplayMember="Title"
                                    ValueMember="TemplateID">
                                    <dxe:ListBoxEdit.ItemTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="10" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <Grid VerticalAlignment="Stretch" Background="Transparent" Tag="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type dxe:ListBoxEdit}}}">
                                                    <StackPanel Orientation="Horizontal" IsHitTestVisible="False" Margin="6,0,6,0" SnapsToDevicePixels="True" >
                                                        <StackPanel SnapsToDevicePixels="True">
                                                            <TextBlock Text="{Binding Title}" Foreground="#FF5E5E5E" FontWeight="Bold" Margin="0,2" SnapsToDevicePixels="True" />
                                                            <TextBlock Text="{Binding Description}" Foreground="#FF5E5E5E" Opacity="0.75" Margin="0,2" TextWrapping="Wrap" SnapsToDevicePixels="True" />
                                                        </StackPanel>
                                                    </StackPanel>
                                                </Grid>
                                                <Grid Grid.Column="1">
                                                    <Path x:Name="editTemplate" Data="M0,44.439791L18.98951,54.569246 0.47998798,62.66881z M17.428029,12.359973L36.955557,23.568769 21.957478,49.686174 20.847757,46.346189 15.11851,45.756407 14.138656,42.166935 8.5292659,41.966761 6.9493899,38.037481 2.4399572,38.477377z M26.812517,0.0009765625C27.350616,-0.012230873,27.875986,0.10826397,28.348372,0.3782568L42.175028,8.3180408C43.85462,9.2780154,44.234529,11.777948,43.02482,13.89789L41.375219,16.767812 21.460039,5.3381228 23.10964,2.4582005C23.979116,0.941679,25.437378,0.034730911,26.812517,0.0009765625z" Stretch="Uniform" Fill="#FF5E5E5E" Width="16" Height="16" Margin="0,0,0,0" RenderTransformOrigin="0.5,0.5" ToolTip="click to edit template" >
                                                        <Path.RenderTransform>
                                                            <TransformGroup>
                                                                <TransformGroup.Children>
                                                                    <RotateTransform Angle="0" />
                                                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                                                </TransformGroup.Children>
                                                            </TransformGroup>
                                                        </Path.RenderTransform>
                                                        <i:Interaction.Triggers>
                                                            <i:EventTrigger EventName="MouseLeftButtonDown">
                                                                <ei:CallMethodAction MethodName="editTemplateMouseLeftButtonDown" TargetObject="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type dxe:ListBoxEdit}}}"/>
                                                            </i:EventTrigger>
                                                        </i:Interaction.Triggers>
                                                    </Path>
                                                </Grid>
                                                <Grid Grid.Column="3">
                                                    <Path x:Name="deleteTemplate" Data="M33.978,27.679999L33.978,58.098995 41.374,58.098995 41.374,27.679999z M14.841001,27.679999L14.841001,58.098995 22.237,58.098995 22.237,27.679999z M4.0320003,22.430001L52.183002,22.430001 52.183002,63.995998 4.0320003,63.995998z M15.974001,0L40.194999,0 40.194999,7.7200003 56.166999,7.7200003 56.166999,15.995 0,15.995 0,7.7200003 15.974001,7.7200003z" Stretch="Uniform" Fill="#FF5E5E5E" Width="16" Height="16" Margin="0,0,0,0" RenderTransformOrigin="0.5,0.5" ToolTip="click to delete template">
                                                        <Path.RenderTransform>
                                                            <TransformGroup>
                                                                <TransformGroup.Children>
                                                                    <RotateTransform Angle="0" />
                                                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                                                </TransformGroup.Children>
                                                            </TransformGroup>
                                                        </Path.RenderTransform>
                                                        <i:Interaction.Triggers>
                                                            <i:EventTrigger EventName="MouseLeftButtonDown">
                                                                <ei:CallMethodAction MethodName="deleteTemplateMouseLeftButtonDown" TargetObject="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type dxe:ListBoxEdit}}}"/>
                                                            </i:EventTrigger>
                                                        </i:Interaction.Triggers>
                                                    </Path>
                                                </Grid>
                                            </Grid>
                                        </DataTemplate>
                                    </dxe:ListBoxEdit.ItemTemplate>
                                </dxe:ListBoxEdit>
                            </Grid>
                        </Grid>
                        <dx:GroupFrame Header="Create Template" Grid.Column="2" Margin="0,12,20,20">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20*"/>
                                    <ColumnDefinition Width="60*"/>
                                    <ColumnDefinition Width="20*"/>
                                </Grid.ColumnDefinitions>
                                <Grid Grid.Column="1">
                                    <Button Content="{Binding TemplateBtnCaption,Mode=OneWay}" Height="23" HorizontalAlignment="Right" Name="btnAdd" VerticalAlignment="Top" Margin="0,254,85,0" Width="75" Command="{Binding Path=AddTemplateCommand}">
                                        <Button.Style>
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="IsEnabled" Value="false" />
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding ElementName=txtTempTitle, Path=(Validation.HasError)}" Value="false" />
                                                            <Condition Binding="{Binding ElementName=txtTempText, Path=(Validation.HasError)}" Value="false" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="IsEnabled" Value="true" />
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>
                                    </Button>

                                    <Button Content="Cancel" Height="23" HorizontalAlignment="Right" Name="btnCancel" VerticalAlignment="Top" Margin="0,254,0,0" Width="75" Command="{Binding Path=CancelTemplateCommand}">
                                        <Button.Style>
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="IsEnabled" Value="false" />
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding ElementName=txtTempTitle, Path=(Validation.HasError)}" Value="false" />
                                                            <Condition Binding="{Binding ElementName=txtTempText, Path=(Validation.HasError)}" Value="false" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="IsEnabled" Value="true" />
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Button.Style>
                                    </Button>

                                    <TextBox Height="23" Margin="59,42,0,0" Name="txtTempTitle" VerticalAlignment="Top" HorizontalAlignment="Stretch" MaxLength="20" Validation.ErrorTemplate="{StaticResource errorTemplateSilverlightStyle}">
                                        <TextBox.Text>
                                            <Binding Path="TemplateTitle" UpdateSourceTrigger="PropertyChanged" ValidatesOnExceptions="True" ValidatesOnDataErrors="True" Mode="TwoWay" >
                                                <Binding.ValidationRules>
                                                    <assets:Required x:Name="titleRequired" ValidatesOnTargetUpdated="True"
                                              Message="Title cannot be empty"/>
                                                    <ExceptionValidationRule/>
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <TextBox Height="23" Margin="59,88,0,0" Name="txtTempText" AcceptsReturn="True" VerticalAlignment="Top" HorizontalAlignment="Stretch" MinHeight="150" MaxLength="150" Validation.ErrorTemplate="{StaticResource errorTemplateSilverlightStyle}">
                                        <TextBox.Text>
                                            <Binding Path="TemplateText" UpdateSourceTrigger="PropertyChanged" ValidatesOnExceptions="True" ValidatesOnDataErrors="True" Mode="TwoWay" >
                                                <Binding.ValidationRules>
                                                    <assets:Required x:Name="textRequired" ValidatesOnTargetUpdated="True"
                                                            Message="Template cannot be empty"/>
                                                    <ExceptionValidationRule/>
                                                </Binding.ValidationRules>
                                            </Binding>
                                        </TextBox.Text>
                                    </TextBox>
                                    <TextBlock Height="23" HorizontalAlignment="Left" Margin="4,42,0,0" Name="lblTempTitle" Text="Title :" VerticalAlignment="Top" />
                                    <TextBlock Height="23" HorizontalAlignment="Left" Margin="0,88,0,0" Name="lblTempText" Text="Template :" VerticalAlignment="Top" />
                                </Grid>
                            </Grid> 
                        </dx:GroupFrame>
                    </Grid>
                </dx:DXTabItem>

                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <ei:CallMethodAction MethodName="groupSMSTabControlSelectionChanged" TargetObject="{Binding}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </dx:DXTabControl>
        </ac:AdornedControl>
        <crtls:DialogManager x:Name="templatesDialog" DataContext="{Binding TemplatesDialog}" IsOpen="{Binding IsOpen}" Title="" DialogHeight="500" DialogWidth="400"  
            DialogWindowStartupLocation="CenterOwner" DialogWindowStyle="None" CloseCommand="{Binding CloseCommand}"  />
    </Grid>
</UserControl>
